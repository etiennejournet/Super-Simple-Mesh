on:
  push:
    branch:
    - 'master'

name: Build Project
jobs:
  DetectFilesChanges:
    runs-on: ubuntu-20.04
    outputs:
      sidecar_changes: ${{ steps.changed-files-sidecar.outputs.any_changed }}
      controller_changes: ${{ steps.changed-files-controller.outputs.any_changed }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Get changes in controller
      id: changed-files-controller
      uses: tj-actions/changed-files@v1.1.2
      with:
        files: controller
    - name: Get changes in sidecar
      id: changed-files-sidecar
      uses: tj-actions/changed-files@v1.1.2
      with:
        files: docker/sidecar/

  SidecarIntegration:
    needs: DetectFilesChanges
    if:  needs.DetectFilesChanges.outputs.sidecar_changes == 'true'
    env:
      IMAGE_NAME: "ssm-sidecar"
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push release Candidate
      if : ${{ github.ref != 'refs/heads/master' }}
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: './docker/sidecar'
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:rc-${{ github.run_id }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:dev-latest
    - name: Compute Docker Tag
      id: docker_tag
      uses: ./.github/actions/compute-docker-tag
      with:
        docker_context: './docker/sidecar'
        image_name: ${{ env.IMAGE_NAME }}
        docker_repo: ${{ secrets.DOCKERHUB_USERNAME }}
    - name: Release Tagged Version
      if : ${{ github.ref == 'refs/heads/master' }}
      uses: docker/build-push-action@v2
      with:
        context: './docker/sidecar'
        tags: '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.docker_tag.outputs.docker_tag }}'
        push: true

  ControllerUnitTests:
    needs: DetectFilesChanges
    if : github.ref != 'refs/heads/master' && needs.DetectFilesChanges.outputs.controller_changes == 'true'
    runs-on: ubuntu-20.04
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Test
      run: |
        cd controller && go test ./...

  ControllerDockerBuild:
    needs: DetectFilesChanges
    if:  needs.DetectFilesChanges.outputs.controller_changes == 'true'
    env:
      IMAGE_NAME: "ssm-injector"
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and Push Release Candidate
      if : github.ref != 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: './controller'
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:rc-${{ github.run_id }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:dev-latest
    - name: Compute Docker Tag
      id: docker_tag
      uses: ./.github/actions/compute-docker-tag
      with:
        docker_context: './controller'
        image_name: ${{ env.IMAGE_NAME }}
        docker_repo: ${{ secrets.DOCKERHUB_USERNAME }}
    - name: Release Tagged Version
      if : github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: './controller'
        push: true
        tags: '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.docker_tag.outputs.docker_tag }}'

  EndToEndTesting:
    needs:
    - SidecarIntegration
    - ControllerDockerBuild
    if : |
      always() &&
      (needs.ControllerDockerBuild.result != 'failure' && needs.SidecarDockerBuild.result != 'failure') &&
      !(needs.SidecarDockerBuild.result == 'skipped' && needs.ControllerDockerBuild.result == 'skipped') &&
      github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - run: |
        cd ./test &&  ./e2e.sh
